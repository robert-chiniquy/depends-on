{
  "A": {
    "cmd": ["true"]
  },
  "B": {
    "cmd": ["true"],
    "depends": ["A"]
  },
  "C": {
    "cmd": ["true"],
    "depends": ["A"]
  },
  "D": {
    "cmd": ["true"],
    "depends": ["B", "C"]
  },
  "false": {
    "cmd": ["false"]
  },
  "true": {
    "cmd": ["true"]
  },
  "exit 0": {
    "cmd": ["./fixtures/exit-0.sh"],
    "wait_for": {
      "exit_code": 0
    }
  },
  "exit 17": {
    "cmd": ["./fixtures/exit-17.sh"],
    "wait_for": {
      "exit_code": 17
    }
  },
  "exit 17 wait_for string": {
    "cmd": ["./fixtures/exit-17.sh"],
    "wait_for": {
      "exit_code": "17"
    }
  },
  "take too long": {
    "cmd": ["./fixtures/take-too-long.sh"],
    "wait_for": {
      "exit_code": 0,
      "timeout": 2
    }
  },
  "bind a port": {
    "cmd": ["./fixtures/bind-port.js", "9897"],
    "wait_for": {
      "host": "127.0.0.1",
      "port": 9897,
      "timeout": 60
    }
  },
  "write to the port": {
    "cmd": ["./fixtures/write-to-port.js", "9897", "hello socket"],
    "depends": ["bind a port"]
  },
  "noise to stdout": {
    "cmd": ["echo", "hello there stdout"]
  },
  "noise to stderr": {
    "cmd": ["./fixtures/noise-to-stderr.sh"],
    "depends": ["noise to stdout"]
  },
  "mkfifo": {
    "cmd": ["mkfifo", "./fish"],
    "stdout": "./logs/mkfifo.stdout",
    "stderr": "./logs/mkfifo.stderr"
  },
  "write": {
    "cmd": ["./fixtures/write.sh"],
    "stdout": "./logs/write.stdout",
    "depends": ["mkfifo"]
  },
  "read": {
    "cmd": ["cat", "./fish"],
    "stdout": "./logs/read.stdout",
    "depends": ["write"]
  },
  "clean": {
    "cmd": ["rm", "./fish"],
    "stdout": "./logs/clean.stdout",
    "depends": ["read"]
  },
  "catch-signals": {
    "cmd": ["./fixtures/catch-signals.js"],
    "stdout": "./logs/catch-signals.log",
    "signal": "SIGKILL"
  },
  "truncate stdio": {
    "cmd": ["./fixtures/truncate-stdio.sh"],
    "stdout": "./logs/truncate-stdout.log",
    "stderr": "./logs/truncate-stderr.log",
    "truncateStdio": true
  },
  "do not truncate stdio": {
    "cmd": ["./fixtures/truncate-stdio.sh"],
    "stdout": "./logs/truncate-stdout.log",
    "stderr": "./logs/truncate-stderr.log"
  }
}
